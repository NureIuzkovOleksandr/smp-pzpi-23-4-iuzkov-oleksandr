Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії
 
 
Звіт
з практичної роботи № 1 
з дисципліни «Скриптові мови програмування»

 
 
 
Виконав:                                                                           Перевірив:
ст. гр. ПЗПІ-23-4                                                              ст. викладач кафедри ПІ
Юзков Олександр                                           	         Сокорчук Ігор Петрович
 
 
 
Харків 2025
1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	05.05.2025	0.1	Зроблено звіт
2 ЗАВДАННЯ
Написати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу.
Ялинка повинна бути симетричною.
Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#». 
Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.
Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску.
Параметри скрипта повинні мати додатнє значення.
Вказані значення повинні округлятися до потрібних у меншу сторону.
Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у батьківський процес.
У скрипті потрібно обовʼязково використати такі конструкції: 
if ... then ... fi
while ... do ... done
until ... do ... done
for ... in .. do ... done
for ((...)); do ... done
У скрипті також потрібно використати функцію
    3 ОПИС ВИКОНАНОЇ РОБОТИ
За допомогою команди nano було створено та відкрито для редагування новий порожній файл із назвою smp-pzpi-23-4-iuzkov-oleksandr-pract1-code. Весь код для побудови ялинки за заданими параметрами висоти та ширини снігу наведено у додатку В. Посилання на відеозапис роботи програмного застосунку розміщено у додатку А. Початковий рядок скрипта — shebang, який вказує системі, яку програму слід використовувати для виконання цього скрипта. 
У рядках 1-38 оголошується функція check_arguments, яка виконує комплексну перевірку вхідних параметрів — висоти дерева та ширини снігу. Функція перевіряє, чи задано рівно два параметри, чи обидва параметри більші за нуль, чи не є вони надто малими для побудови ялинки, а також чи дотримується допустиме співвідношення між висотою та шириною снігу. У разі невідповідності параметрів функція виводить відповідне повідомлення про помилку у стандартний потік помилок і завершує роботу з різними кодами виходу. 
    1 #!/bin/bash
    2 
    3 check_arguments() {
    4     if [ $# -ne 2 ]; then
    5         echo "Увага! Потрібно вказати два параметри: висоту та ширину снігу!" >&2
    6         exit 1
    7     fi
    8 
    9     if [ "$1" -le 0 ] || [ "$2" -le 0 ]; then
    10         echo "Помилка: обидва значення мають бути більші за нуль!" >&2
    11         exit 2
    12     fi
    13 
    14     if [ "$1" -lt 8 ] || [ "$2" -lt 7 ]; then
    15         echo "На жаль, із заданими розмірами неможливо створити ялинку." >&2
    16         exit 3
    17     fi
    18 
    19     local diff=$(( $1 - $2 ))
    20     case $diff in
    21         0|1|2) ;;
    22         *) echo "Недопустиме співвідношення висоти до снігу. Перевірте параметри!" >&2; exit 4 ;;
    23     esac
    24 
    25     if [ $(( $1 % 2 )) -ne 0 ] && [ $(( $2 % 2 )) -ne 0 ]; then
    26         if [ $diff -eq 0 ]; then
    27             echo "Параметри не дозволяють збудувати симетричну ялинку!" >&2
    28             exit 5
    29         fi
    30     fi
    31 
    32     if [ $(( $1 % 2 )) -eq 0 ] && [ $(( $2 % 2 )) -eq 0 ]; then
    33         if [ $diff -eq 2 ]; then
    34             echo "Параметри не дозволяють збудувати симетричну ялинку!" >&2
    35             exit 6
    36         fi
    37     fi
    38 }

У рядках 40-57 оголошується функція print_tree_line, яка відповідає за виведення одного рядка ялинки. Вона приймає три аргументи: кількість пробілів для відступу, кількість символів у рядку та символ для друку. Функція використовує цикл while для виведення пробілів і цикл until для виведення символів без переносу рядка, а потім переходить на новий рядок. 
    40 print_tree_line() {
    41     local indent=$1
    42     local length=$2
    43     local symbol=$3
    44 
    45     local i=0
    46     while [ $i -lt $indent ]; do
    47         echo -n " "
    48         ((i++))
    49     done
    50 
    51     j=0
    52     until [ $j -ge $length ]; do
    53         echo -n "$symbol"
    54         ((j++))
    55     done
    56     echo
    57 }

У рядках 59-110 основна частина: зчитуються параметри, перевіряються функцією check_arguments. За допомогою циклів for малюється верхня та нижня частини ялинки з чергуванням символів * і #. Потім двома рядками формується стовбур із символів #. Перед виведенням основи зі снігу ширина підкоригована, якщо була парною. Основа — суцільний рядок із зірочок.

    59     TREE_HEIGHT=$1
    60     SNOW_WIDTH=$2
    61     check_arguments "$TREE_HEIGHT" "$SNOW_WIDTH"
    62 
    63     TOP_PART_HEIGHT=$(((TREE_HEIGHT - 2) / 2))
    64     MAX_TRIANGLE_WIDTH=$((SNOW_WIDTH - 2))
    65     CURRENT_MARK="*"
    66 
    67     for ((width = 1; width <= MAX_TRIANGLE_WIDTH; width += 2)); do
    68         padding=$(( (SNOW_WIDTH - width) / 2 ))
    69         print_tree_line $padding $width "$CURRENT_MARK"
    70 
    71         if [ "$CURRENT_MARK" == "*" ]; then
    72             CURRENT_MARK="#"
    73         else
    74             CURRENT_MARK="*"
    75         fi
    76     done
    77 
    78     if [ "$CURRENT_MARK" == "*" ]; then
    79         CURRENT_MARK="#"
    80     else
    81         CURRENT_MARK="*"
    82     fi
    83 
    84     for level in $(seq 3 2 $MAX_TRIANGLE_WIDTH); do
    85         margin=$(( (SNOW_WIDTH - level) / 2 ))
    86 
    87         if [ "$CURRENT_MARK" == "*" ]; then
    88             CURRENT_MARK="#"
    89         else
    90             CURRENT_MARK="*"
    91         fi
    92 
    93         print_tree_line $margin $level "$CURRENT_MARK"
    94     done
    95 
    96     for ((step = 0; step < 2; step++)); do
    97         space=$(( (SNOW_WIDTH - 3) / 2 ))
    98         print_tree_line $space 3 "#"
    99     done
    100 
    101     if [ $((SNOW_WIDTH % 2)) -eq 0 ]; then
    102         SNOW_WIDTH=$((SNOW_WIDTH - 1))
    103     fi
    104 
    105     k=0
    106     while [ $k -lt $SNOW_WIDTH ]; do
    107         echo -n "*"
    108         ((k++))
    109     done
    110     echo


У програмі застосовано всі типи циклів і функції, передбачені завданням. Після створення скрипт було збережено, а права доступу змінено командами chmod a+x для надання виконуваних прав і chmod go-w — щоб редагувати файл міг лише його власник. 
4 ВИСНОВКИ
Під час виконання роботи я навчився створювати Bash-скрипти з використанням умов, різних циклів, функцій і обробкою аргументів командного рядка. Реалізував алгоритм побудови симетричної ялинки за заданими висотою та шириною, а також здобув навички перевірки правильності введених даних, виведення помилок і налаштування прав доступу до скрипту згідно з технічними вимогами. 
ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/DEewrKd6gmI
Хронологічний опис відеозапису:
00:00 - Вступ
00:10 - Завдання
00:23 - Розгляд програми
02:17 - Розгляд коду
















ДОДАТОК В
Програмний код
GitHub репозиторій: https://github.com/NureIuzkovOleksandr/smp-pzpi-23-4-iuzkov-oleksandr/blob/main/Pract1/smp-pzpi-23-4-iuzkov-oleksandr-pract1/smp-pzpi-23-4-iuzkov-oleksandr-pract1-code
    1. #!/bin/bash
    2. 
    3. check_arguments() {
    4.     if [ $# -ne 2 ]; then
    5.         echo "Увага! Потрібно вказати два параметри: висоту та ширину снігу!" >&2
    6.         exit 1
    7.     fi
    8. 
    9.     if [ "$1" -le 0 ] || [ "$2" -le 0 ]; then
    10.         echo "Помилка: обидва значення мають бути більші за нуль!" >&2
    11.         exit 2
    12.     fi
    13. 
    14.     if [ "$1" -lt 8 ] || [ "$2" -lt 7 ]; then
    15.         echo "На жаль, із заданими розмірами неможливо створити ялинку." >&2
    16.         exit 3
    17.     fi
    18. 
    19.     local diff=$(( $1 - $2 ))
    20.     case $diff in
    21.         0|1|2) ;;
    22.         *) echo "Недопустиме співвідношення висоти до снігу. Перевірте параметри!" >&2; exit 4 ;;
    23.     esac
    24. 
    25.     if [ $(( $1 % 2 )) -ne 0 ] && [ $(( $2 % 2 )) -ne 0 ]; then
    26.         if [ $diff -eq 0 ]; then
    27.             echo "Параметри не дозволяють збудувати симетричну ялинку!" >&2
    28.             exit 5
    29.         fi
    30.     fi
    31. 
    32.     if [ $(( $1 % 2 )) -eq 0 ] && [ $(( $2 % 2 )) -eq 0 ]; then
    33.         if [ $diff -eq 2 ]; then
    34.             echo "Параметри не дозволяють збудувати симетричну ялинку!" >&2
    35.             exit 6
    36.         fi
    37.     fi
    38. }
    39. 
    40. print_tree_line() {
    41.     local indent=$1
    42.     local length=$2
    43.     local symbol=$3
    44. 
    45.     local i=0
    46.     while [ $i -lt $indent ]; do
    47.         echo -n " "
    48.         ((i++))
    49.     done
    50. 
    51.     j=0
    52.     until [ $j -ge $length ]; do
    53.         echo -n "$symbol"
    54.         ((j++))
    55.     done
    56.     echo
    57. }
    58. 
    59.     TREE_HEIGHT=$1
    60.     SNOW_WIDTH=$2
    61.     check_arguments "$TREE_HEIGHT" "$SNOW_WIDTH"
    62. 
    63.     TOP_PART_HEIGHT=$(((TREE_HEIGHT - 2) / 2))
    64.     MAX_TRIANGLE_WIDTH=$((SNOW_WIDTH - 2))
    65.     CURRENT_MARK="*"
    66. 
    67.     for ((width = 1; width <= MAX_TRIANGLE_WIDTH; width += 2)); do
    68.         padding=$(( (SNOW_WIDTH - width) / 2 ))
    69.         print_tree_line $padding $width "$CURRENT_MARK"
    70. 
    71.         if [ "$CURRENT_MARK" == "*" ]; then
    72.             CURRENT_MARK="#"
    73.         else
    74.             CURRENT_MARK="*"
    75.         fi
    76.     done
    77. 
    78.     if [ "$CURRENT_MARK" == "*" ]; then
    79.         CURRENT_MARK="#"
    80.     else
    81.         CURRENT_MARK="*"
    82.     fi
    83. 
    84.     for level in $(seq 3 2 $MAX_TRIANGLE_WIDTH); do
    85.         margin=$(( (SNOW_WIDTH - level) / 2 ))
    86. 
    87.         if [ "$CURRENT_MARK" == "*" ]; then
    88.             CURRENT_MARK="#"
    89.         else
    90.             CURRENT_MARK="*"
    91.         fi
    92. 
    93.         print_tree_line $margin $level "$CURRENT_MARK"
    94.     done
    95. 
    96.     for ((step = 0; step < 2; step++)); do
    97.         space=$(( (SNOW_WIDTH - 3) / 2 ))
    98.         print_tree_line $space 3 "#"
    99.     done
    100. 
    101.     if [ $((SNOW_WIDTH % 2)) -eq 0 ]; then
    102.         SNOW_WIDTH=$((SNOW_WIDTH - 1))
    103.     fi
    104. 
    105.     k=0
    106.     while [ $k -lt $SNOW_WIDTH ]; do
    107.         echo -n "*"
    108.         ((k++))
    109.     done
    110.     echo
